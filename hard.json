[
  {
    "id": 1,
    "title": "Longest Increasing Path in a Matrix",
    "description": "Given an m x n integers matrix, return the length of the longest increasing path in the matrix. From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).",
    "difficulty": "Hard",
    "testCases": {
      "1": {
        "input": [[9, 9, 4], [6, 6, 8], [2, 1, 1]],
        "output": 4
      },
      "2": {
        "input": [[3, 4, 5], [3, 2, 6], [2, 2, 1]],
        "output": 4
      },
      "3": {
        "input": [[1]],
        "output": 1
      }
    },
    "UserQuestion": {
      "input": [[1, 2, 3], [6, 5, 4], [7, 8, 9]],
      "output": 9
    }
  },
  {
    "id": 2,
    "title": "Word Search II",
    "description": "Given an m x n board of characters and a list of strings words, return all words on the board. Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.",
    "difficulty": "Hard",
    "testCases": {
      "1": {
        "input": [["o", "a", "a", "n"], ["e", "t", "a", "e"], ["i", "h", "k", "r"], ["i", "f", "l", "v"]],
        "words": ["oath", "pea", "eat", "rain"],
        "output": ["eat", "oath"]
      },
      "2": {
        "input": [["a", "b"], ["c", "d"]],
        "words": ["abcb"],
        "output": []
      },
      "3": {
        "input": [["a", "b", "c"], ["a", "e", "d"], ["a", "f", "g"]],
        "words": ["abcdefg", "gfedcbaaa", "eaabcdgfa", "befa", "dgc", "ade"],
        "output": ["abcdefg", "befa", "eaabcdgfa", "gfedcbaaa"]
      }
    },
    "UserQuestion": {
      "input": [["z", "x", "z"], ["z", "z", "z"], ["z", "z", "z"]],
      "words": ["zzz", "zxz"],
      "output": ["zxz", "zzz"]
    }
  },
  {
    "id": 3,
    "title": "Minimum Window Substring",
    "description": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string. A substring is a contiguous sequence of characters within the string.",
    "difficulty": "Hard",
    "testCases": {
      "1": {
        "input": ["ADOBECODEBANC", "ABC"],
        "output": "BANC"
      },
      "2": {
        "input": ["a", "a"],
        "output": "a"
      },
      "3": {
        "input": ["a", "aa"],
        "output": ""
      }
    },
    "UserQuestion": {
      "input": ["AXYBZCDEBANC", "ABBC"],
      "output": "BZCDEBA"
    }
  }
]
